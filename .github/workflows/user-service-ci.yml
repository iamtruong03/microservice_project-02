name: User Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'user-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'user-service/**'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build User Service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: |
        cd user-service
        chmod +x ./mvnw
        ./mvnw clean compile package

    - name: Build Docker image
      run: |
        cd user-service
        docker build -t user-service:${{ github.sha }} .

    - name: Save Docker image
      run: |
        docker save user-service:${{ github.sha }} | gzip > user-service-image.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: user-service-docker-image
        path: user-service-image.tar.gz

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application for security check
      run: |
        cd user-service
        chmod +x ./mvnw
        ./mvnw clean compile

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: user-service-docker-image

    - name: Load Docker image
      run: |
        docker load < user-service-image.tar.gz

    - name: Deploy to staging
      run: |
        echo "Deploying user-service:${{ github.sha }} to staging environment"
        # Add your staging deployment commands here
        # For example: kubectl apply -f k8s/staging/ or docker-compose up -d

