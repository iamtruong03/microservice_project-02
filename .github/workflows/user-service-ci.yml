name: User Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'user-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'user-service/**'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build User Service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: |
        cd user-service
        chmod +x ./mvnw
        ./mvnw clean compile package

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: user-service-jar
        path: user-service/target/*.jar

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application for security check
      run: |
        cd user-service
        chmod +x ./mvnw
        ./mvnw clean compile

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: user-service-jar
        path: ./artifacts

    - name: Deploy to staging
      run: |
        echo "Deploying user-service JAR to staging environment"
        ls -la ./artifacts/
        echo "JAR file ready for deployment"
        # Add your staging deployment commands here
        # For example: 
        # - Copy JAR to staging server: scp ./artifacts/*.jar user@staging:/app/
        # - Restart service: ssh user@staging "sudo systemctl restart user-service"

